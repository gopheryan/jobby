// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jobmanagerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobManagerClient is the client API for JobManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobManagerClient interface {
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error)
	StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*StopJobResponse, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// Server will close the send-stream once output is exhausted
	GetJobOutput(ctx context.Context, in *GetJobOutputRequest, opts ...grpc.CallOption) (JobManager_GetJobOutputClient, error)
}

type jobManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobManagerClient(cc grpc.ClientConnInterface) JobManagerClient {
	return &jobManagerClient{cc}
}

func (c *jobManagerClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error) {
	out := new(StartJobResponse)
	err := c.cc.Invoke(ctx, "/jobby.JobManager/StartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*StopJobResponse, error) {
	out := new(StopJobResponse)
	err := c.cc.Invoke(ctx, "/jobby.JobManager/StopJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/jobby.JobManager/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) GetJobOutput(ctx context.Context, in *GetJobOutputRequest, opts ...grpc.CallOption) (JobManager_GetJobOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobManager_ServiceDesc.Streams[0], "/jobby.JobManager/GetJobOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobManagerGetJobOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobManager_GetJobOutputClient interface {
	Recv() (*GetJobOutputResponse, error)
	grpc.ClientStream
}

type jobManagerGetJobOutputClient struct {
	grpc.ClientStream
}

func (x *jobManagerGetJobOutputClient) Recv() (*GetJobOutputResponse, error) {
	m := new(GetJobOutputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobManagerServer is the server API for JobManager service.
// All implementations must embed UnimplementedJobManagerServer
// for forward compatibility
type JobManagerServer interface {
	StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error)
	StopJob(context.Context, *StopJobRequest) (*StopJobResponse, error)
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// Server will close the send-stream once output is exhausted
	GetJobOutput(*GetJobOutputRequest, JobManager_GetJobOutputServer) error
	mustEmbedUnimplementedJobManagerServer()
}

// UnimplementedJobManagerServer must be embedded to have forward compatible implementations.
type UnimplementedJobManagerServer struct {
}

func (UnimplementedJobManagerServer) StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (UnimplementedJobManagerServer) StopJob(context.Context, *StopJobRequest) (*StopJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (UnimplementedJobManagerServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedJobManagerServer) GetJobOutput(*GetJobOutputRequest, JobManager_GetJobOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobOutput not implemented")
}
func (UnimplementedJobManagerServer) mustEmbedUnimplementedJobManagerServer() {}

// UnsafeJobManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobManagerServer will
// result in compilation errors.
type UnsafeJobManagerServer interface {
	mustEmbedUnimplementedJobManagerServer()
}

func RegisterJobManagerServer(s grpc.ServiceRegistrar, srv JobManagerServer) {
	s.RegisterService(&JobManager_ServiceDesc, srv)
}

func _JobManager_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobby.JobManager/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).StartJob(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobby.JobManager/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).StopJob(ctx, req.(*StopJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobby.JobManager/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_GetJobOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetJobOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobManagerServer).GetJobOutput(m, &jobManagerGetJobOutputServer{stream})
}

type JobManager_GetJobOutputServer interface {
	Send(*GetJobOutputResponse) error
	grpc.ServerStream
}

type jobManagerGetJobOutputServer struct {
	grpc.ServerStream
}

func (x *jobManagerGetJobOutputServer) Send(m *GetJobOutputResponse) error {
	return x.ServerStream.SendMsg(m)
}

// JobManager_ServiceDesc is the grpc.ServiceDesc for JobManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobby.JobManager",
	HandlerType: (*JobManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _JobManager_StartJob_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _JobManager_StopJob_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _JobManager_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetJobOutput",
			Handler:       _JobManager_GetJobOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jobby.proto",
}
